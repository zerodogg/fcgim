#!/usr/bin/perl
# fcgim - FastCGI application manager
# Copyright (C) Eskild Hustvedt 2010
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use JSON::Any;
use Getopt::Long;
use Storable qw(dclone);
use File::Path qw(mkpath);
use File::Temp;
use POSIX qw(setgid setuid setsid);
use File::Basename qw(basename);
use FindBin;
use lib "$FindBin::RealBin/lib/";
use constant {
	true           => 1,
	false          => undef,
};

my %methods;
my $appN = basename($0);
my $config;
my $confFile = '/etc/fcgim.conf';
my $cmdOutFile;
my $VERSION = '0.1';

main();

# Purpose: Main sub, handles initialization, command-line parsing etc.
sub main
{
	my $usage = "Usage: $appNÂ [APP or all] [COMMAND]\nSee \"$appN --help\" for more information.\n";

	if(defined $ARGV[0])
	{
		# Run cmdHelper if requested, this is only used internally
		if ($ARGV[0] eq 'cmdHelper')
		{
			cmdHelper();
		}

		# Handle --help and --version
		if ($ARGV[0] =~ /^(--?help|-h)$/)
		{
			fullUsage();
			exit(0);
		}
		elsif($ARGV[0] =~ /^--version$/)
		{
			print "fcgim version $VERSION\n";
			exit(0);
		}
	}
    # If we have no params, output usage and exit
	else
	{
        print $usage;
        exit(0);
	}

    # Load the config file, if errors occur we die()
	loadConfig($confFile);

	my $app = shift(@ARGV);
	my $command = shift(@ARGV);

    # Flush STDOUT immediately
	$| = 1;

    # If no command was supplied, check if we requested either of the commands that
    # work without apps, if so, assume command=$app app=all.
    # Otherwise display usage info.
	if(not defined $command)
	{
        if (defined $app && $app =~ /^(status|restartdead)$/)
        {
            $command = $app;
            $app = 'all';
        }
        else
        {
            die($usage);
        }
	}

	if(not defined $config->{apps}->{$app} and not $app eq 'all')
	{
        # Detect reversed parameters
        if ($config->{apps}->{$command})
        {
            die("$app: unknown application\nMaybe you meant \"$appN $command $app\"?\n");
        }
        else
        {
            die("$app: unknown application\n");
        }
	}

    # Create our data dir
	if(not -d $config->{fcgim}->{fcgimTempPath})
	{
		mkpath($config->{fcgim}->{fcgimTempPath}) or die("Failed to create $config->{fcgim}->{fcgimTempPath}: $!\n");
	}

    # Handle all
	if ($app eq 'all')
	{
		foreach my $e (keys %{$config->{apps}})
		{
			actionHandler($command,$e);
		}
	}
    # Single app
	else
	{
		actionHandler($command,$app);
	}

	exit(0);
}

# Purpose: Display the full usage information
sub fullUsage
{
	print "Usage: $appN [APP] [COMMAND]\n";
	print " [APP] can be the string \"all\" to perform the action for ALL applications.\n";
	print "\nCommands:\n";
	print "start         - start an application\n";
	print "stop          - stop an application\n";
	print "restart       - restart an application\n";
	print "status *      - display status information for an application\n";
	print "restartdead * - restart an application if it has died\n";
    print "\n";
    print "*) Can be used without supplying an [APP] - in which case it assumes\n";
    print "   APP=all\n";
}

# Purpose: Handle an action for a single application
sub actionHandler
{
	my $action = shift;
	my $app = shift;

    # Fetch config and object
	$app = getAppConfig($app);
	my $object = getObject($app);

    # Handle actions
	if   ($action eq 'start')
	{
		$object->start();
	}
	elsif($action eq 'restart')
	{
		$object->restart();
	}
	elsif($action eq 'stop')
	{
		$object->stop();
	}
	elsif($action eq 'status')
	{
		$object->status();
	}
    elsif($action eq 'restartdead')
    {
        $object->restartDead();
    }
	else
	{
		die("Unknown action \"$action\"\n");
	}
}

# Purpose: Load the configuration file
sub loadConfig
{
	my $file = shift;

	die("Configuration file \"$file\": does not exist\n") if not -e $file;
	die("Configuration file \"$file\": is not readable\n") if not -r $file;

	open(my $i,'<',$file) or die("Failed to open \"$file\" for reading: $!\n");
	my $content;
	while(my $line = <$i>)
	{
		next if $line =~ m{^\s*//};
		$line =~ s/^\s+//;
		chomp($line);
		$content .= $line;
	}
	close($i) or warn("Failed to close filehandle for \"$file\": $!\n");
	
	# Allow commas at the end of lists in the config file
	$content =~ s/,}/}/g;

	eval
	{
		$config = JSON::Any->jsonToObj($content) or die("Failed to parse the config file.\n");
		1;
	};
	if (my $e = $@)
	{
		my $extra = '';
		if ($content =~ /\'/)
		{
			$extra = "\nKeep in mind that using \' as quotes in JSON is not allowed, use \".";
		}
		$e =~ s/at\s*\S+\s*line\s*\S+//;
		chomp($e);

		die("Failed to parse config file: $e$extra\n");
	}

	foreach my $appReq (qw(runAsUID runAsGID))
	{
		if(not defined($config->{fcgim}->{$appReq}) or not length($config->{fcgim}->{$appReq}))
		{
			die("Required configuration option fcgim:$appReq not set\n");
		}
	}

	if(not keys %{$config->{apps}})
	{
		die("No applications defined in config\n");
	}
	elsif(scalar(keys %{$config->{apps}}) == 1 && $config->{apps}->{app1})
	{
		die("You need to change the name of the first application to something other than \"app1\" to indicate that you have actually configured an application.\n");
	}

	foreach my $app (keys %{$config->{apps}})
	{
		foreach my $req (qw(path type processes serverFile))
		{
			my $e = $config->{apps}->{$app}->{$req};
			if(not defined $e or not length($e))
			{
				die("The configuration option \"$req\" for the application \"$app\" is not set\n");
			}
		}
	}
}

# Purpose: Run a command, wraps system()
sub cmd
{
	my $dropToGID = shift;
	my $dropToPID = shift;
	my $daemonize = shift;
    # Use cmdhelper if needed
	if(defined $dropToPID and defined $dropToGID)
	{
		unshift(@_,$0,'cmdHelper','setID',$dropToGID,$dropToPID);
	}
	if($daemonize)
	{
		unshift(@_,$0,'cmdHelper','daemonize',$daemonize);
	}
    # Redirect output
	if(not $cmdOutFile)
	{
		$cmdOutFile = tempfile(UNLINK => 1);
	}
    # An invalid warning is emitted here, so disable temporarily
	no warnings;
	open(SAVED_OUT,">&STDOUT");
    open(SAVED_ERR,">&STDERR");
	open(STDOUT,'>',$cmdOutFile) or die("Failed to redirect STDOUT to $cmdOutFile: $!\n");
	open(STDERR,'>',$cmdOutFile) or die("Failed to redirect STDERR to $cmdOutFile: $!\n");
    my $ret = system(@_);
    open(STDOUT,">&SAVED_OUT");
    open(STDERR,">&SAVED_ERR");
	use warnings;
    return $ret;
}

# Purpose: Get output from a previous cmd()
sub getCmdOutput
{
	if(not defined $cmdOutFile or not -e $cmdOutFile)
	{
		return '';
	}
	open(my $i,'<',$cmdOutFile);
	my $v = $/;
	$/ = undef;
	my $data = <$i>;
	$/ = $v;
	close($i);
	return $data;
}

# Purpose: Get an object for an app
sub getObject
{
	my $app = shift;
	my $type = $app->{type};
	$type =~ s/\W//;
	if(not eval('use FCGIM::Methods::'.$type.';1;'))
	{
		my $e = $@;
		if ($e =~ m{FCGIM/Methods/$type.pm\s+\w+\s+\@INC})
		{
			die("Unknown application type: $type\n");
		}
		else
		{
			$e =~ s/BEGIN\s+failed.*\n//g;
			$e =~ s/Compilation\s+failed\s+in\s+require.*\n//g;
			$e =~ s/\s+at\s+\(eval\s+\d+\)\s+line\s+\d+//;
			die("Failed to load fcgim method file for \"$type\": $e");
		}
	}
	my $o = eval('return FCGIM::Methods::'.$type.'->new(app => $app, fullConfig => $config)');
	my $e = $@;
	if(not $o)
	{
		die("Object construction for FCGIM::Methods::$type failed. This is a bug.\n$e");
	}
	return $o;
}

# Purpose: Get the config for a specific app
sub getAppConfig
{
	my $app = shift;

    # Do a deep clone
	my $appConf = dclone($config->{apps}->{$app});

	# Generate/copy defaults as needed
	foreach my $copyDefault (qw(runAsUID runAsGID))
	{
		if(not defined $appConf->{$copyDefault})
		{
			$appConf->{$copyDefault} = $config->{fcgim}->{$copyDefault};
		}
	}
	if(not defined $appConf->{PIDFile})
	{
		$appConf->{PIDFile} = $config->{fcgim}->{fcgimTempPath}.'/'.$app.'.pidfile';
	}

	$appConf->{name} = $app;

	return $appConf;
}

# Purpose: Wrapper around File::Temp::tempfile
sub tempfile
{
	my ($fh,$fnam) = File::Temp::tempfile(@_);
	close($fh);
	return $fnam;
}

# Purpose: A helper used by fcgim to drop priviliges when starting apps
sub cmdHelper
{
	shift(@ARGV);
	my $type = shift(@ARGV);
	if ($type eq 'setID')
	{
		my $uid = shift(@ARGV);
		my $gid = shift(@ARGV);
		setgid($gid) or die("Failed to setgid($gid): $!\n");
		setuid($uid) or die("Failed to setuid($uid): $!\n");

		die("Command missing\n") if not @ARGV;

		exec(@ARGV) or die("Failed to exec ".join(' ',@ARGV).": $!\n");
	}
	elsif($type eq 'daemonize')
	{
		my $pidFile = shift(@ARGV);
		my $newPID = fork;
		exit(0) if $newPID;
		die("Failed to fork: $!\n") if not defined($newPID);

		open(my $pf,'>',$pidFile) or die("Failed to open $pidFile: $!\n");
		print {$pf} $$;
		close($pf);

		setsid();
		open(STDIN, '<', '/dev/null');
		open(STDOUT, '>>', '/dev/null');
		open(STDERR, '>>', '/dev/null');
		exec(@ARGV) or die("Failed to exec ".join(' ',@ARGV).": $!\n");
	}
	else
	{
		die("Unknown helper type \"$type\"\n");
	}
}

__END__
=encoding utf8

=head1 NAME

fcgim - a FastCGI application manager

=head1 SYNOPSIS

B<fcgim> [I<APPLICATION NAME>] [I<OPTIONS>]

=head1 DESCRIPTION

fcgim is a FastCGI application manager. It handles starting/stopping/restarting
many different FastCGI instances and provides a simple initscript-like interface
to performing actions on them.

Currently it only supports Catalyst and PHP FastCGI applications, but adding support for
new types of applications is simple, and can be done in under 100 lines of
code (including comments). See ./lib/FCGIM/Methods/Catalyst.pm for an example.

=head1 COMMANDS

=over

=item B<start>

Starts an application if it is not already running.

=item B<stop>

Stops an application if it is currently running.

=item B<restart>

Restarts an application.

For those application types that support it, fcgim will launch a test version of the
application before the actual restart to make sure it starts up correctly
before restarting the currently running instance - if that fails, the one
currently running will be kept, if it succeeds it will proceed and stop then
start the application. Currently, only the Catalyst application type supports
this.

=item B<status>

Display status (running/stopped/dead) information for an application.

This can be used without any [APPLICATION] parameter, in which case it will
output status information for all applications.

=item B<restartdead>

Restart a dead application.

This can be used without any [APPLICATION] parameter, in which case it will
restart all dead applications.

=back

=head1 OPTIONS

=over

=item B<-h, --help>

Display the help screen

=item B<--version>

Display the version number

=back

=head1 CONFIGURATION FILE

The configuration format is a liberal version of JSON. It should be placed at
I</etc/fcgim.conf>.

=head2 EXAMPLE

	// FCGIM configuration file. The format for this file is JSON, with the added
	// support for comments (any line that STARTS with // is considered a comment)
	{
		// Configuration of fcigm itself
		"fcgim": {
			 // Which UID and GID respectively to run the fastcgi processes
			 // as. You can also set them on a per-app basis.
			"runAsUID":33,
			"runAsGID":33,
			 // Where to put PID files etc.
			 // This SHOULD be somewhere that gets cleaned on every startup,
			 // /dev/shm/fcgim is therefore a good choice
			 "fcgimTempPath":"/dev/shm/fcgim",
			 // Any environment variables you want set in the environment of
			 // ALL applications. Variables in any app-specific ENV overrides
			 // variables set here.
			 "ENV": {
				 "PERL5LIB":"/var/perlApp.data/perlModules/lib/perl5:/var/perlApp.data/perlModules/lib/perl5/i486-linux-gnu-thread-multi",
			 },
		},
		// Your apps, one entry in this hash for each of your FastCGI apps
		// that you want fcgim to manage. The "key" will be the name of the app
		// that you can use to refer to the app in fcgim invocations.
		"apps":
		{
			"myapp": {
				// The root directory that the app is installed at
				"path":"/var/www/myapp",
				// Supports: Catalyst, PHP
				// Case sensitive.
				"type":"Catalyst",
				// The max number of processes to use for this app
				"processes":4,
				// The location of the server process file
				"serverFile":"/tmp/myapp.socket",
				// Any environment variables you want set in the environment of
				// this application
				"ENV": {},
			},
		},
	}

	// vi: set ft=javascript :

=head1 HELP/SUPPORT

If you need additional help, please visit the website at
L<http://random.zerodogg.org/fcgim>

=head1 BUGS AND LIMITATIONS

If you find a bug, please report it at L<http://random.zerodogg.org/fcgim/bugs>

=head1 AUTHOR

B<fcgim> is written by Eskild Hustvedt I<<code @tt zerodogg d.t org>>

=head1 FILES

=over

=item I</etc/fcgim.conf>

The fcgim configuration file

=back

=head1 SEE ALSO

L<Catalyst>, L<php-cgi(1)>, L<http://www.fastcgi.com/>

=head1 LICENSE AND COPYRIGHT

Copyright (C) Eskild Hustvedt 2010

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.
