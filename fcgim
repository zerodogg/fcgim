#!/usr/bin/perl
# fcgim - FastCGI application manager
# Copyright (C) Eskild Hustvedt 2010, 2011
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use JSON::Any;
use Getopt::Long;
use Storable qw(dclone);
use File::Path qw(mkpath);
use File::Temp;
use POSIX qw(setgid setuid setsid);
use File::Basename qw(basename);
use FindBin;
use lib "$FindBin::RealBin/lib/";
use FCGIM::Constants;

# Allow bundling of options with GeteOpt
Getopt::Long::Configure ('bundling', 'prefix_pattern=(--|-)');

# App name
my $appN = basename($0);
# Config (hashref)
my $config;
# Path to config file
my $confFile = '/etc/fcgim.conf';
# Used for tracking calls to fcgim cmd output
my $cmdOutFile;
# Verbosity indicator, the higher the more verbose
my $verbosity = 1;
# true if we are allowed to use SIGKILL
my $allowKill = 0;
# true if we are allowed to perform sanity checks
my $allowSanity = 1;
# Our version number
my $VERSION = '0.1';

main();

# Purpose: Main sub, handles initialization, command-line parsing etc.
sub main
{
	my $usage = "Usage: $appNÂ [APP or all] [COMMAND]\nSee \"$appN --help\" for more information.\n";

	if(defined $ARGV[0])
	{
		# Run cmdHelper if requested, this is only used internally
		if ($ARGV[0] eq 'cmdHelper')
		{
			cmdHelper();
		}

		GetOptions (
			'allowkill' => \$allowKill,
			'verbose|v' => sub { $verbosity++;},
			'nosanity' => sub { $allowSanity = 0 },
			'version' => sub {
				print "fcgim version $VERSION\n";
				exit(0);
			},
			'help|h' => sub { fullUsage(); exit 0; },
		) or die("See $0 --help for more information\n");
	}
	# If we have no params, output usage and exit
	else
	{
		print $usage;
		exit(0);
	}

	# Load the config file, if errors occur we die()
	loadConfig($confFile);

	my $app = shift(@ARGV);
	my $command = shift(@ARGV);

	# Flush STDOUT immediately
	$| = 1;

	# If no command was supplied, check if we requested either of the commands that
	# work without apps, if so, assume command=$app app=all.
	# Otherwise display usage info.
	if(not defined $command)
	{
		if (defined $app && $app =~ /^(status|restartdead)$/)
		{
			$command = $app;
			$app = 'all';
		}
		else
		{
			if ($app =~ /^(start|restart(dead)?|stop|sanitycheck|status)$/)
			{
				die("Error: [APP] parameter missing.\n\n".$usage);
			}
			else
			{
				die("Error: command missing.\n\n".$usage);
			}
		}
	}

	if ($command eq 'forcerestart')
	{
		$allowKill = 1;
		$allowSanity = 0;
		$command = 'restart';
	}

	foreach my $myApp (split(/,/,$app))
	{
		if(not defined $config->{apps}->{$myApp} and not $myApp eq 'all')
		{
			# Detect reversed parameters
			if ($config->{apps}->{$command})
			{
				die("$myApp: unknown application\nMaybe you meant \"$appN $command $myApp\"?\n");
			}
			else
			{
				die("$myApp: unknown application\n");
			}
		}

		# Create our data dir
		if(not -d $config->{fcgim}->{fcgimTempPath})
		{
			mkpath($config->{fcgim}->{fcgimTempPath}) or die("Failed to create $config->{fcgim}->{fcgimTempPath}: $!\n");
		}

		# Handle all
		if ($myApp eq 'all')
		{
			foreach my $e (sort keys %{$config->{apps}})
			{
				actionHandler($command,$e);
			}
		}
		# Single app
		else
		{
			actionHandler($command,$myApp);
		}
	}

	exit(0);
}

# Purpose: Display the full usage information
sub fullUsage
{
	print "Usage: $appN (PARAMETERS) [APP] [COMMAND]\n";
	print " [APP] can be the string \"all\" to perform the action for ALL applications.\n";
	print " You can perform actions on multiple applications by supplying multiple\n";
	print " names as the [APP] parameter, separated by commas\n";
	print "\nParameters:\n";
	PrintHelp('-v','--verbose','Increase verbosity (supply multiple times to increase further');
	PrintHelp('-h','--help','Show this help screen');
	PrintHelp('','--nosanity','Disable sanity checks on hosts with sanityOnRestart=true');
	PrintHelp('','--allowkill','Allow use of SIGKILL (9) when stopping servers and SIGTERM fails');
	print "\nCommands:\n";
	PrintHelp('','start','Start an application');
	PrintHelp('','stop','Stop an application');
	PrintHelp('','restart','Restart an application');
	PrintHelp('','forcerestart','Force-restart an application');
	PrintHelp('','status *','Display status information for an application');
	PrintHelp('','sanitycheck','Perform a simple sanity check on an application');
	PrintHelp('','restartdead *','Restart an application if it has died');
	print "*) Can be used without the [APP] parameter\n";
	print "\n";
	print "See the manpage for more information.\n";
}

# Purpose: Handle an action for a single application
sub actionHandler
{
	my $action = shift;
	my $app = shift;

	# Fetch config and object
	$app = getAppConfig($app);
	my $object = getObject($app);

	# Handle actions
	if   ($action eq 'start')
	{
		$object->start();
	}
	elsif($action eq 'restart')
	{
		$object->restart();
	}
	elsif($action eq 'stop')
	{
		$object->stop();
	}
	elsif($action eq 'status')
	{
		$object->status();
	}
	elsif($action eq 'restartdead')
	{
		$object->restartDead();
	}
	elsif($action eq 'sanitycheck')
	{
		$object->sanityCheck();
	}
	else
	{
		die("Unknown action \"$action\"\n");
	}
}

# Purpose: Load the configuration file
sub loadConfig
{
	my $file = shift;

	die("Configuration file \"$file\": does not exist\n") if not -e $file;
	die("Configuration file \"$file\": is not readable\n") if not -r $file;

	open(my $i,'<',$file) or die("Failed to open \"$file\" for reading: $!\n");
	my $content;
	while(my $line = <$i>)
	{
		next if $line =~ m{^\s*//};
		$line =~ s/^\s+//;
		chomp($line);
		$content .= $line;
	}
	close($i) or warn("Failed to close filehandle for \"$file\": $!\n");

	# Allow commas at the end of lists in the config file
	$content =~ s/,}/}/g;

	eval
	{
		$config = JSON::Any->jsonToObj($content) or die("Failed to parse the config file.\n");
		1;
	}
		or do
	{
		my $e = $@;
		my $extra = '';
		if ($content =~ /\'/)
		{
			$extra = "\nKeep in mind that using \' as quotes in JSON is not allowed, use \".";
		}
		$e =~ s/at\s*\S+\s*line\s*\S+//;
		chomp($e);

		die("Failed to parse config file: $e$extra\n");
	};

	if(not keys %{$config->{apps}})
	{
		die("No applications defined in config\n");
	}
	elsif(scalar(keys %{$config->{apps}}) == 1 && $config->{apps}->{app1})
	{
		die("You need to change the name of the first application to something other than \"app1\" to indicate that you have actually configured an application.\n");
	}

	foreach my $appReq (qw(runAsUID runAsGID))
	{
		if (!isInt($config->{fcgim}->{$appReq}))
		{
			die("Required configuration option fcgim:$appReq not set\n");
		}
	}

	foreach my $app (keys %{$config->{apps}})
	{
		foreach my $req (qw(path type processes serverFile))
		{
			if (!isStr($config->{apps}->{$app}->{$req}))
			{
				die("The configuration option \"$req\" for the application \"$app\" is not set\n");
			}
		}
	}
}

# Purpose: Run a command, wraps system()
sub cmd
{
	my $dropToGID = shift;
	my $dropToUID = shift;
	my $daemonize = shift;

	printv(V_VERBOSE,'About to run: '.join(' ',@_)."\n");

	# Use cmdhelper if needed
	if($daemonize)
	{
		printv(V_DEBUG,"Will daemonize the command manually\n");
		unshift(@_,$0,'cmdHelper','daemonize',$daemonize);
	}
	if(defined $dropToUID and defined $dropToGID)
	{
		printv(V_DEBUG,"Will run as GID=$dropToGID and UID=$dropToUID\n");
		unshift(@_,$0,'cmdHelper','setID',$dropToGID,$dropToUID);
	}
	# Redirect output
	if(not $cmdOutFile)
	{
		$cmdOutFile = tempfile(UNLINK => 1);
	}
	# An invalid warning is emitted here, so disable temporarily
	no warnings;
	open(SAVED_OUT,'>&STDOUT');
	open(SAVED_ERR,'>&STDERR');
	open(STDOUT,'>',$cmdOutFile) or die("Failed to redirect STDOUT to $cmdOutFile: $!\n");
	open(STDERR,'>',$cmdOutFile) or die("Failed to redirect STDERR to $cmdOutFile: $!\n");
	my $ret = system(@_);
	open(STDOUT,'>&SAVED_OUT');
	open(STDERR,'>&SAVED_ERR');
	use warnings;
	return $ret;
}

# Purpose: Get output from a previous cmd()
sub getCmdOutput
{
	if(not defined $cmdOutFile or not -e $cmdOutFile)
	{
		return '';
	}
	open(my $i,'<',$cmdOutFile);
	my $v = $/;
	$/ = undef;
	my $data = <$i>;
	$/ = $v;
	close($i);
	return $data;
}

# Purpose: Get an object for an app
sub getObject
{
	my $app = shift;
	my $type = $app->{type};
	$type =~ s/\W//g;
	if(not eval('use FCGIM::Methods::'.$type.';1;'))
	{
		my $e = $@;
		if ($e =~ m{FCGIM/Methods/$type.pm\s+\w+\s+\@INC})
		{
			die("Unknown application type: $type\n");
		}
		else
		{
			$e =~ s/BEGIN\s+failed.*\n//g;
			$e =~ s/Compilation\s+failed\s+in\s+require.*\n//g;
			$e =~ s/\s+at\s+\(eval\s+\d+\)\s+line\s+\d+//;
			die("Failed to load fcgim method file for \"$type\": $e");
		}
	}
	my $o = eval('return FCGIM::Methods::'.$type.'->new(app => $app, fullConfig => $config)');
	my $e = $@;
	if(not $o)
	{
		die("Object construction for FCGIM::Methods::$type failed. This is a bug.\n$e");
	}
	return $o;
}

# Purpose: Get the config for a specific app
sub getAppConfig
{
	my $app = shift;

	# Do a deep clone
	my $appConf = dclone($config->{apps}->{$app});

	# Generate/copy defaults as needed
	foreach my $copyDefault (qw(runAsUID runAsGID))
	{
		if(not defined $appConf->{$copyDefault})
		{
			$appConf->{$copyDefault} = $config->{fcgim}->{$copyDefault};
		}
	}
	if(not defined $appConf->{PIDFile})
	{
		$appConf->{PIDFile} = $config->{fcgim}->{fcgimTempPath}.'/'.$app.'.pidfile';
	}

	$appConf->{name} = $app;

	return $appConf;
}

# Purpose: Wrapper around File::Temp::tempfile
sub tempfile
{
	my ($fh,$fnam) = File::Temp::tempfile(@_);
	close($fh);
	return $fnam;
}

# Purpose: Check if a var is an integer
sub isInt
{
	my $val = shift;
	if(defined($val) && !ref($val) && $val =~ /^\d+$/)
	{
		return true;
	}
	return;
}

# Purpose: Check if a var is a string
sub isStr
{
	my $val = shift;
	if(defined($val) && !ref($val) && $val =~ /\w/)
	{
		return true;
	}
	return;
}

sub printv
{
	my $level = shift;
	if ($level <= $verbosity)
	{
		my $t = 1;
		for(my $t = 1; $t < $level; $t++)
		{
			print " ";
		}
		print join('',@_);
	}
}

# Purpose: A helper used by fcgim to drop priviliges when starting apps
sub cmdHelper
{
	shift(@ARGV);
	my $type = shift(@ARGV);
	if ($type eq 'setID')
	{
		my $uid = shift(@ARGV);
		my $gid = shift(@ARGV);
		setgid($gid) or die("Failed to setgid($gid): $!\n");
		setuid($uid) or die("Failed to setuid($uid): $!\n");

		die("Command missing\n") if not @ARGV;

		exec(@ARGV) or die('Failed to exec '.join(' ',@ARGV).": $!\n");
	}
	elsif($type eq 'daemonize')
	{
		my $pidFile = shift(@ARGV);
		my $newPID = fork;
		exit(0) if $newPID;
		die("Failed to fork: $!\n") if not defined($newPID);

		open(my $pf,'>',$pidFile) or die("Failed to open $pidFile: $!\n");
		print {$pf} $$;
		close($pf);

		setsid();
		open(STDIN, '<', '/dev/null');
		open(STDOUT, '>>', '/dev/null');
		open(STDERR, '>>', '/dev/null');
		exec(@ARGV) or die('Failed to exec '.join(' ',@ARGV).": $!\n");
	}
	else
	{
		die("Unknown helper type \"$type\"\n");
	}
}

# Purpose: Print formatted --help output
# Usage: PrintHelp('-shortoption', '--longoption', 'description');
#  Description will be reformatted to fit within a normal terminal
sub PrintHelp
{
	# The short option
	my $short = shift,
	# The long option
	my $long = shift;
	# The description
	my $desc = shift;
	# The generated description that will be printed in the end
	my $GeneratedDesc;
	# The current line of the description
	my $currdesc = '';
	# The maximum length any line can be
	my $maxlen = 80;
	# The length the options take up
	my $optionlen = 20;
	# Check if the short/long are LONGER than optionlen, if so, we need
	# to do some additional magic to take up only $maxlen.
	# The +1 here is because we always add a space between them, no matter what
	if ((length($short) + length($long) + 1) > $optionlen)
	{
		$optionlen = length($short) + length($long) + 1;
	}
	# Split the description into lines
	foreach my $part (split(/ /,$desc))
	{
		if(defined $GeneratedDesc)
		{
			if ((length($currdesc) + length($part) + 1 + 20) > $maxlen)
			{
				$GeneratedDesc .= "\n";
				$currdesc = '';
			}
			else
			{
				$currdesc .= ' ';
				$GeneratedDesc .= ' ';
			}
		}
		$currdesc .= $part;
		$GeneratedDesc .= $part;
	}
	# Something went wrong
	die('Option mismatch') if not $GeneratedDesc;
	# Print it all
	foreach my $description (split(/\n/,$GeneratedDesc))
	{
		printf "%-4s %-15s %s\n", $short,$long,$description;
		# Set short and long to '' to ensure we don't print the options twice
		$short = '';$long = '';
	}
	# Succeed
	return true;
}

__END__
=encoding utf8

=head1 NAME

fcgim - a FastCGI application manager

=head1 SYNOPSIS

B<fcgim> [I<OPTIONS>] [I<APPLICATION NAME/LIST>] [I<COMMAND>]

=head1 DESCRIPTION

fcgim is a FastCGI application manager. It handles starting/stopping/restarting
many different FastCGI instances and provides a simple initscript-like interface
to performing actions on them.

Currently it only supports Catalyst and PHP FastCGI applications, but adding support for
new types of applications is simple, and can be done in under 100 lines of
code (including comments). See ./lib/FCGIM/Methods/Catalyst.pm for an example.

fcgim can perform actions on multiple applications at once, simply supply
multiple applications separated by commas as the second parameter.

=head1 COMMANDS

=over

=item B<start>

Starts an application if it is not already running.

=item B<stop>

Stops an application if it is currently running.

=item B<restart>

Restarts an application.

For those applications that supports it, fcgim will run a sanitycheck (see the
I<sanitycheck> command) before stopping the running instance, as long as
the "sanityOnRestart" option is set to true for that app. If the sanitycheck
fails, fcgim will refuse to restart the application.

=item B<forcerestart>

Force-restarts an application. This is equivalent to running
"fcgim --nosanity ---allowkill [APP] restart"

=item B<status>

Display status (running/stopped/dead) information for an application.

This can be used without any [APPLICATION] parameter, in which case it will
output status information for all applications.

=item B<sanitycheck>

Launch a test version of the application to make sure it starts up correctly.
This instance will be shut down if it successfully starts up. It does
not use the socket or PID file of the app, so as long as the application
does not perform any destructive operations during startup, it should not
interfere with running applications.

Not all types support this. Currently only Catalyst applications support
sanitycheck.

=item B<restartdead>

Restart a dead application.

This can be used without any [APPLICATION] parameter, in which case it will
restart all dead applications.

=back

=head1 OPTIONS

=over

=item B<-h, --help>

Display the help screen

=item B<--version>

Display the version number

=item B<--allowkill>

Permit fcgim to use SIGKILL ("kill -9") to stop processes if use of SIGTERM
fails (the default is to abort when SIGTERM fails).

=item B<---nosanity>

Force fcgim not to run sanity checks on hosts that have sanityOnRestart set to
true.

=item B<-v, --verbose>

Increase fcgim verbosity. Supply multiple times to increase further.

=back

=head1 CONFIGURATION FILE

The configuration format is a liberal version of JSON. It should be placed at
I</etc/fcgim.conf>.

=head2 EXAMPLE

	// FCGIM configuration file. The format for this file is JSON with comment
	// support (any line that STARTS with // is considered a comment)
	{
		// Configuration of fcigm itself
		"fcgim": {
			 // Which UID and GID respectively to run the fastcgi processes
			 // as. You can also set them on a per-app basis by adding them to 
			 // the app config section.
			"runAsUID":33,
			"runAsGID":33,
			 // Where to put PID files etc.
			 // This SHOULD be somewhere that gets cleaned on every startup,
			 // /dev/shm/fcgim is therefore a good choice
			 "fcgimTempPath":"/dev/shm/fcgim",
			 // Any environment variables you want set in the environment of
			 // ALL applications. Variables in any app-specific ENV overrides
			 // variables set here.
			 "ENV": {
				 "PERL5LIB":"/var/perlApp.data/perlModules/lib/perl5:/var/perlApp.data/perlModules/lib/perl5/i486-linux-gnu-thread-multi",
			 },
		},
		// Your apps, one entry in this hash for each of your FastCGI apps
		// that you want fcgim to manage. The "key" will be the name of the app
		// that you can use to refer to the app in fcgim invocations.
		"apps":
		{
			"myapp": {
				// The root directory that the app is installed at
				"path":"/var/www/myapp",
				// Supports: Catalyst, PHP
				// Case sensitive.
				"type":"Catalyst",
				// The max number of processes to use for this app
				"processes":4,
				// The location of the server process file. Can also be an address
				// to listen on (HOST:PORT or :PORT)
				"serverFile":"/tmp/myapp.socket",
				// (Catalyst APPs only): Enable/disable sanity checking of server
				// before 'restart'. See the manpage for more information.
				"sanityOnRestart":true,
				// Any environment variables you want set in the environment of
				// this application
				"ENV": {},
			},
		},
	}

	// vi: set ft=javascript :

=head1 HELP/SUPPORT

If you need additional help, please visit the website at
L<http://random.zerodogg.org/fcgim>

=head1 BUGS AND LIMITATIONS

If you find a bug, please report it at L<http://random.zerodogg.org/fcgim/bugs>

=head1 AUTHOR

B<fcgim> is written by Eskild Hustvedt I<<code @tt zerodogg d.t org>>

=head1 FILES

=over

=item I</etc/fcgim.conf>

The fcgim configuration file

=back

=head1 SEE ALSO

L<Catalyst>, L<php-cgi(1)>, L<http://www.fastcgi.com/>

=head1 LICENSE AND COPYRIGHT

Copyright (C) Eskild Hustvedt 2010

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.
